// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SpeedcheckerSDK
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import CoreTelephony
import Darwin
import DataCompression
import Foundation
import NetworkExtension
import Socket
import Swift
import SystemConfiguration
import UIKit
import XMLParsing
import _Concurrency
import os
public struct SpeedTestOptions {
  public let downloadTimeMs: Swift.Int
  public let uploadTimeMs: Swift.Int
  public let downloadThreadsCount: Swift.Int
  public let uploadThreadsCount: Swift.Int
  public let downloadSampleTimeMs: Swift.Int
  public let uploadSampleTimeMs: Swift.Int
  public let speedLimitForAdditionalThreadsMbps: Swift.Int
  public let additionalThreadsCount: Swift.Int
  public let skipFirstSamplesTimeMs: Swift.Int
  public let connectionTimeoutMs: Swift.Int
  public init(downloadTimeMs: Swift.Int = 10000, uploadTimeMs: Swift.Int = 10000, downloadThreadsCount: Swift.Int = 3, uploadThreadsCount: Swift.Int = 3, downloadSampleTimeMs: Swift.Int = 100, uploadSampleTimeMs: Swift.Int = 100, speedLimitForAdditionalThreadsMbps: Swift.Int = 90, additionalThreadsCount: Swift.Int = 10, skipFirstSamplesTimeMs: Swift.Int = 2000, connectionTimeoutMs: Swift.Int = 10000)
}
public enum SCIssueSignalMeasurementStrength : Swift.Int, Swift.Codable {
  case weak
  case ok
  case veryGood
  case excellent
  public func convertToDB() -> Swift.Int
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class SCSignalHelper {
  public init()
  public func getWiFiInfo() -> (ssid: Swift.String, bssid: Swift.String)
  public func getCellularInfo() -> (id: Swift.String, mcc: Swift.String, mnc: Swift.String, technology: Swift.String)
  public func getSignalStrengh() -> (cellStrength: SpeedcheckerSDK.SCIssueSignalMeasurementStrength?, wiFiStrength: SpeedcheckerSDK.SCIssueSignalMeasurementStrength?)
  @objc deinit
}
public enum SCError : Swift.Error {
  case invalidSettings
  case invalidEnvironment
  case invalidArgument
  case invalidRequest
  case requestFailed
  case invalidResponse
  case responseFailed
  public static func == (a: SpeedcheckerSDK.SCError, b: SpeedcheckerSDK.SCError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SCTestError : Swift.Int {
  case none
  case invalidSettings
  case invalidServers
  case progress
  case failed
  case notSaved
  case cancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct SCLoggerDetail : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SCLogger {
  public static var sdkVersion: Swift.String
  public static func append(_ scope: Swift.String, _ value: Swift.String)
  public static func breakline(_ description: Swift.String)
  public static func send(from sender: Swift.String, isError: Swift.Bool = false, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func getDetails(sender: Swift.String) -> SpeedcheckerSDK.SCLoggerDetail
}
public enum SCNetworkStatus {
  case none
  case wifi
  case cellular
  case simulator
  public static func == (a: SpeedcheckerSDK.SCNetworkStatus, b: SpeedcheckerSDK.SCNetworkStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SCNetwork {
  public var cellularCountryCode: Swift.String? {
    get
  }
  public static func getGatewayIP() -> Swift.String
  public static func getNetworkDataInfo() -> (linkSpeed: Swift.UInt32?, sentPackages: Swift.UInt32?, sentBytes: Swift.UInt32?, recvPackages: Swift.UInt32?, recvBytes: Swift.UInt32?)?
  public static func currentNetwork() -> SpeedcheckerSDK.SCNetwork
  public init(status: SpeedcheckerSDK.SCNetworkStatus)
  public func getNetworkSSID() -> Swift.String?
  public func getNetworkBSSID() -> Swift.String?
  public func getActiveConnection() -> Swift.String
}
extension Swift.String {
  public var md5: Swift.String {
    get
  }
}
public typealias Observer = ((_ response: SpeedcheckerSDK.PingResponse) -> Swift.Void)
public typealias FinishedCallback = ((_ result: SpeedcheckerSDK.PingResult) -> Swift.Void)
public protocol PingDelegate {
  func didReceive(response: SpeedcheckerSDK.PingResponse)
}
public enum PingError : Swift.Error, Swift.Equatable {
  case responseTimeout
  case invalidLength(received: Swift.Int)
  case checksumMismatch(received: Swift.UInt16, calculated: Swift.UInt16)
  case invalidType(received: SpeedcheckerSDK.ICMPType.RawValue)
  case invalidCode(received: Swift.UInt8)
  case identifierMismatch(received: Swift.UInt16, expected: Swift.UInt16)
  case invalidSequenceIndex(received: Swift.UInt16, expected: Swift.UInt16)
  case unknownHostError
  case addressLookupError
  case hostNotFound
  case addressMemoryError
  case requestError
  case requestTimeout
  case checksumOutOfBounds
  case unexpectedPayloadLength
  case packageCreationFailed
  case socketNil
  case invalidHeaderOffset
  case socketOptionsSetError(err: Swift.Int32)
  public static func == (a: SpeedcheckerSDK.PingError, b: SpeedcheckerSDK.PingError) -> Swift.Bool
}
public class SocketInfo {
  weak public var pinger: SpeedcheckerSDK.SwiftyPing?
  final public let identifier: Swift.UInt16
  public init(pinger: SpeedcheckerSDK.SwiftyPing, identifier: Swift.UInt16)
  @objc deinit
}
@objc public class SwiftyPing : ObjectiveC.NSObject {
  public struct Destination {
    public let host: Swift.String
    public let useIP6: Swift.Bool
    public let ipv4Address: Foundation.Data?
    public let ipv6Address: Foundation.Data?
    public var socketAddress: Darwin.sockaddr_in? {
      get
    }
    public var ip: Swift.String? {
      get
    }
    public static func getIPv4AddressFromHost(host: Swift.String) throws -> Foundation.Data
  }
  final public let destination: SpeedcheckerSDK.SwiftyPing.Destination
  final public let configuration: SpeedcheckerSDK.PingConfiguration
  public var observer: SpeedcheckerSDK.Observer?
  public var finished: SpeedcheckerSDK.FinishedCallback?
  public var delegate: SpeedcheckerSDK.PingDelegate?
  public var targetCount: Swift.Int?
  public var currentCount: Swift.UInt64 {
    get
  }
  public var responses: [SpeedcheckerSDK.PingResponse] {
    get
  }
  public init(destination: SpeedcheckerSDK.SwiftyPing.Destination, configuration: SpeedcheckerSDK.PingConfiguration, queue: Dispatch.DispatchQueue) throws
  public convenience init(ipv4Address: Swift.String, config configuration: SpeedcheckerSDK.PingConfiguration, queue: Dispatch.DispatchQueue) throws
  public convenience init(ipv6data: Foundation.Data, config configuration: SpeedcheckerSDK.PingConfiguration, queue: Dispatch.DispatchQueue) throws
  public convenience init(host: Swift.String, configuration: SpeedcheckerSDK.PingConfiguration, queue: Dispatch.DispatchQueue) throws
  @objc deinit
  public func startPinging() throws
  public func stopPinging(resetSequence: Swift.Bool = true)
  public func haltPinging(resetSequence: Swift.Bool = true)
}
public struct IPHeader {
  public var versionAndHeaderLength: Swift.UInt8
  public var differentiatedServices: Swift.UInt8
  public var totalLength: Swift.UInt16
  public var identification: Swift.UInt16
  public var flagsAndFragmentOffset: Swift.UInt16
  public var timeToLive: Swift.UInt8
  public var `protocol`: Swift.UInt8
  public var headerChecksum: Swift.UInt16
  public var sourceAddress: (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)
  public var destinationAddress: (Swift.UInt8, Swift.UInt8, Swift.UInt8, Swift.UInt8)
}
public enum ICMPType : Swift.UInt8 {
  case EchoReply
  case EchoRequest
  case EchoReply6
  case EchoRequest6
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PingResponse {
  public let identifier: Swift.UInt16
  public let ipAddress: Swift.String?
  public let sequenceNumber: Swift.UInt16
  public let trueSequenceNumber: Swift.UInt64
  public let duration: Foundation.TimeInterval
  public let error: SpeedcheckerSDK.PingError?
  public let byteCount: Swift.Int?
  public let ipHeader: SpeedcheckerSDK.IPHeader?
}
public struct PingResult {
  public struct Roundtrip {
    public let minimum: Swift.Double
    public let maximum: Swift.Double
    public let average: Swift.Double
    public let standardDeviation: Swift.Double
  }
  public let responses: [SpeedcheckerSDK.PingResponse]
  public let packetsTransmitted: Swift.UInt64
  public let packetsReceived: Swift.UInt64
  public var packetLoss: Swift.Double? {
    get
  }
  public let roundtrip: SpeedcheckerSDK.PingResult.Roundtrip?
}
public struct PingConfiguration {
  public let pingInterval: Foundation.TimeInterval
  public let timeoutInterval: Foundation.TimeInterval
  public var handleBackgroundTransitions: Swift.Bool
  public var timeToLive: Swift.Int?
  public var payloadSize: Swift.Int
  public var haltAfterTarget: Swift.Bool
  public init(interval: Foundation.TimeInterval = 1, with timeout: Foundation.TimeInterval = 5)
  public init(interval: Foundation.TimeInterval)
}
extension Foundation.Data {
  public var socketAddress: Darwin.sockaddr {
    get
  }
  public var socketAddressInternet: Darwin.sockaddr_in {
    get
  }
}
public enum ConnectionIssue : Swift.Int {
  case callDrop
  case poorCallQuality
  case noSignal
  case unableToMakeCall
  case noMobileInternet
  case slowInternetSpeed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class InternetSpeedTest : ObjectiveC.NSObject {
  final public let userID: Swift.Int
  final public let clientID: Swift.Int
  public var delegate: SpeedcheckerSDK.InternetSpeedTestDelegate?
  public var png: Swift.String?
  public init(clientID: Swift.Int = 0, userID: Swift.Int = 0, isBackground: Swift.Bool = false, bgdlTimeMs: Swift.Int? = nil, bgulTimeMs: Swift.Int? = nil, bgskipTimeMs: Swift.Int? = nil, delegate: SpeedcheckerSDK.InternetSpeedTestDelegate?)
  open func start(_ servers: [SpeedcheckerSDK.SpeedTestServer], completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func start(_ servers: [SpeedcheckerSDK.SCServer], completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func start(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func startTest(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func startWithOptions(_ options: SpeedcheckerSDK.SpeedTestOptions, _ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func startWithOptions(_ options: SpeedcheckerSDK.SpeedTestOptions, servers: [SpeedcheckerSDK.SpeedTestServer], _ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func forceFinish(_ completion: (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  open func currentNetwork() -> SpeedcheckerSDK.SpeedTestNetwork
  public static func clearTempDirectory()
  public func speedTestServers(_ servers: [SpeedcheckerSDK.SCServer]?) -> [SpeedcheckerSDK.SpeedTestServer]?
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension SpeedcheckerSDK.InternetSpeedTest {
  public static var customerId: Swift.String? {
    get
    set(newValue)
  }
  public static var customerTag: Swift.String? {
    get
    set(newValue)
  }
}
public protocol InternetSpeedTestDelegate {
  func internetTest(finish error: SpeedcheckerSDK.SpeedTestError)
  func internetTest(finish result: SpeedcheckerSDK.SpeedTestResult)
  func internetTest(received servers: [SpeedcheckerSDK.SpeedTestServer])
  func internetTest(selected server: SpeedcheckerSDK.SpeedTestServer, latency: Swift.Int)
  func internetTestDownloadStart()
  func internetTestDownloadFinish()
  func internetTestDownload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
  func internetTestUploadStart()
  func internetTestUploadFinish()
  func internetTestUpload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
}
public struct SCClient {
  public init(ID: Swift.Int?, applicationHash: Swift.String? = nil, name: Swift.String? = nil)
}
@_hasMissingDesignatedInitializers public class SCDataController {
  @objc deinit
}
public enum SCLatencySpeedType {
  case http
  case icmp
  public static func == (a: SpeedcheckerSDK.SCLatencySpeedType, b: SpeedcheckerSDK.SCLatencySpeedType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SCLatencySpeed {
  public let type: SpeedcheckerSDK.SCLatencySpeedType
}
extension SpeedcheckerSDK.SCLatencySpeed {
  public var valueInMs: Swift.Int? {
    get
  }
}
public func == (lhs: SpeedcheckerSDK.SCLatencySpeed, rhs: SpeedcheckerSDK.SCLatencySpeed) -> Swift.Bool
@_hasMissingDesignatedInitializers public class SCLatencyTestController : SpeedcheckerSDK.PingDelegate {
  public static var pingInterval: Foundation.TimeInterval?
  public func didReceive(response: SpeedcheckerSDK.PingResponse)
  @objc deinit
}
public struct SCLocation {
  public let latitude: Swift.Double?
  public let longitude: Swift.Double?
  public let accuracyInMeters: Swift.Int?
  public let ipAddress: Swift.String?
  public var countryCode: Swift.String?
  public var cityName: Swift.String?
  public var country: Swift.String? {
    get
  }
  public init(latitude: Swift.Double?, longitude: Swift.Double?, accuracyInMeters: Swift.Int?, ipAddress: Swift.String?, countryCode: Swift.String?, cityName: Swift.String?)
}
public enum SCServerType {
  case speedchecker
  case ookla
  public static func == (a: SpeedcheckerSDK.SCServerType, b: SpeedcheckerSDK.SCServerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SCServer : Swift.Equatable {
  public let ID: Swift.Int?
  public let version: Swift.Int?
  public let type: SpeedcheckerSDK.SCServerType
  public let scheme: Swift.String?
  public let domain: Swift.String?
  public let port: Swift.Int?
  public let downloadFolderPath: Swift.String?
  public let uploadFolderPath: Swift.String?
  public let uploadScript: Swift.String?
  public let userIP: Swift.String?
  public let userISP: Swift.String?
  public let customDownloadLink: Swift.String?
  public let customUploadLink: Swift.String?
  public var location: SpeedcheckerSDK.SCLocation?
  public var description: Swift.String {
    get
  }
  public init(ID: Swift.Int?, version: Swift.Int?, type: SpeedcheckerSDK.SCServerType = .speedchecker, scheme: Swift.String?, domain: Swift.String?, port: Swift.Int? = nil, downloadFolderPath: Swift.String?, uploadFolderPath: Swift.String?, uploadScript: Swift.String?, location: SpeedcheckerSDK.SCLocation?, userIP: Swift.String?, userISP: Swift.String?)
  public init(customUploadLink: Swift.String, customDownloadLink: Swift.String)
  public func domainURL() -> Foundation.URL?
}
public func == (lhs: SpeedcheckerSDK.SCServer, rhs: SpeedcheckerSDK.SCServer) -> Swift.Bool
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SCServerDataController : SpeedcheckerSDK.SCDataController {
  public static func getServers(for client: SpeedcheckerSDK.SCClient? = nil, completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getAllServers(_ completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getCustomServers(from link: Swift.String, completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  public static func getOoklaServers(_ completion: @escaping ([SpeedcheckerSDK.SCServer]?, SpeedcheckerSDK.SCError?) -> Swift.Void)
  @objc deinit
}
public class SCServerSelecter {
  public init(_ servers: [SpeedcheckerSDK.SCServer], timeout: Foundation.TimeInterval = 1, preferIP6: Swift.Bool, delegate: SpeedcheckerSDK.SCServerSelecterDelegate?)
  public func start()
  @objc deinit
}
public protocol SCServerSelecterDelegate {
  func serverSelecter(_ selecter: SpeedcheckerSDK.SCServerSelecter, status: SpeedcheckerSDK.SCTestStatus)
  func serverSelecter(_ selecter: SpeedcheckerSDK.SCServerSelecter, didSelect server: SpeedcheckerSDK.SCServer, latency: SpeedcheckerSDK.SCLatencySpeed?, latencies: [Swift.Double])
}
public enum SCTestStatus {
  case ready
  case progress
  case finished
  case failed
  public static func == (a: SpeedcheckerSDK.SCTestStatus, b: SpeedcheckerSDK.SCTestStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SpeedTestError : Swift.Int {
  case invalidSettings
  case invalidServers
  case inProgress
  case failed
  case notSaved
  case cancelled
  case locationUndefined
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SpeedTestNetworkType : Swift.Int {
  case any
  case wifi
  case cellular
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SpeedTestNetwork {
  final public let type: SpeedcheckerSDK.SpeedTestNetworkType
  final public let cellularCarrier: CoreTelephony.CTCarrier?
  final public let cellularTechnology: Swift.String?
  open var networkShortDescription: Swift.String? {
    get
  }
  @objc deinit
}
public enum SpeedTestLatencyType : Swift.Int {
  case http
  case icmp
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SpeedTestResult {
  open var network: SpeedcheckerSDK.SpeedTestNetwork
  final public let server: SpeedcheckerSDK.SpeedTestServer
  final public let latencyType: SpeedcheckerSDK.SpeedTestLatencyType
  final public let latencyInMs: Swift.Int
  final public let jitter: Swift.Double
  final public let downloadSpeed: SpeedcheckerSDK.SpeedTestSpeed
  final public let uploadSpeed: SpeedcheckerSDK.SpeedTestSpeed
  final public let ipAddress: Swift.String?
  final public let ispName: Swift.String?
  final public let date: Foundation.Date?
  public static func create(withPlain date: Foundation.Date, latencyType: Swift.String?, latencyInMs: Swift.Int, jitter: Swift.Double, downloadInBps: Swift.Double, uploadInBps: Swift.Double, ipAddress: Swift.String?, ispName: Swift.String?, networkType: Swift.String?, serverID: Swift.Int, serverDomain: Swift.String?, serverCityName: Swift.String?, serverCountryCode: Swift.String?) -> SpeedcheckerSDK.SpeedTestResult
  @objc deinit
}
extension SpeedcheckerSDK.SpeedTestResult {
  public var connectionType: Swift.String? {
    get
  }
  public var locationLatitude: Swift.Double? {
    get
  }
  public var locationLongitude: Swift.Double? {
    get
  }
  public var networkOperator: Swift.String {
    get
  }
  public var deviceInfo: Swift.String {
    get
  }
}
public class SpeedTestServer {
  final public let ID: Swift.Int?
  final public let type: SpeedcheckerSDK.SCServerType
  final public let scheme: Swift.String?
  final public let domain: Swift.String?
  final public let port: Swift.Int?
  final public let countryCode: Swift.String?
  final public let cityName: Swift.String?
  public var country: Swift.String? {
    get
  }
  public init(ID: Swift.Int?, type: SpeedcheckerSDK.SCServerType = .speedchecker, scheme: Swift.String?, domain: Swift.String?, port: Swift.Int? = nil, countryCode: Swift.String?, cityName: Swift.String?)
  @objc deinit
}
public class SpeedTestSpeed {
  final public let bps: Swift.Double
  public init(bps value: Swift.Double)
  public init(kbps value: Swift.Double)
  public init(mbps value: Swift.Double)
  open var kbps: Swift.Double {
    get
  }
  open var mbps: Swift.Double {
    get
  }
  open var descriptionInKbps: Swift.String {
    get
  }
  open var descriptionInMbps: Swift.String {
    get
  }
  @objc deinit
}
public struct SSDPService : Swift.Equatable {
  public let cacheControl: Foundation.Date
  public let location: Foundation.URL
  public let server: Swift.String
  public let searchTarget: Swift.String
  public let uniqueServiceName: Swift.String
  public let otherHeaders: [Swift.String : Swift.String]
  public static func == (lhs: SpeedcheckerSDK.SSDPService, rhs: SpeedcheckerSDK.SSDPService) -> Swift.Bool
}
public struct UPNPAction {
  public struct TotalBytesReceived : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesReceived: Swift.Int
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
  public struct TotalBytesSent : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
  public struct ByteStatistics : SpeedcheckerSDK.UPNPActionable {
    public init()
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public let NewTotalBytesReceived: Swift.Int
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
  public struct ByteStatsForAssociatedDev : SpeedcheckerSDK.UPNPActionable {
    public init(associatedDeviceMACAddress: Swift.String)
    public let name: Swift.String
    public struct Response : Swift.Codable {
      public let NewTotalBytesSent: Swift.Int
      public let NewTotalBytesReceived: Swift.Int
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
}
public protocol UPNPActionable {
  associatedtype Response : Swift.Decodable, Swift.Encodable
  var name: Swift.String { get }
}
extension SpeedcheckerSDK.UPNPActionable {
  public var requestElement: Swift.String {
    get
  }
  public var responseElement: Swift.String {
    get
  }
  public func requestBody(via service: SpeedcheckerSDK.UPNPService) -> Foundation.Data?
}
public enum UPNPDeviceType : Swift.String {
  case internetGateway
  case wlanAccessPoint
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UPNPServiceType : Swift.String {
  case wanAny
  case wanCommonInterfaceConfig
  case wanIPConnection
  case wanPPPConnection
  case wlanConfiguration
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UPNPVersion : Swift.Codable {
  public let major: Swift.Int?
  public let minor: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UPNPService : Swift.Codable {
  public let serviceId: Swift.String?
  public let serviceType: Swift.String
  public let controlURL: Swift.String?
  public let eventSubURL: Swift.String?
  public let SCPDURL: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UPNPDeviceList : Swift.Codable {
  public let items: [SpeedcheckerSDK.UPNPDevice]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case items
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UPNPServiceList : Swift.Codable {
  public let items: [SpeedcheckerSDK.UPNPService]
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case items
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UPNPDevice : Swift.Codable {
  public let deviceType: Swift.String?
  public let deviceList: SpeedcheckerSDK.UPNPDeviceList?
  public let manufacturer: Swift.String?
  public let manufacturerURL: Foundation.URL?
  public let modelDescription: Swift.String?
  public let modelName: Swift.String?
  public let modelNumber: Swift.String?
  public let modelURL: Foundation.URL?
  public let friendlyName: Swift.String?
  public let serialNumber: Swift.String?
  public let UDN: Swift.String?
  public let UPC: Swift.String?
  public var serviceURL: Foundation.URL?
  public let serviceList: SpeedcheckerSDK.UPNPServiceList?
  public func first(service value: SpeedcheckerSDK.UPNPServiceType) -> SpeedcheckerSDK.UPNPService?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum UPNPDiscoverError : Swift.Error {
  case unavailable
  case unknown
  case busy
  case reason(Swift.String)
}
public protocol UPNPDiscoverDelegate {
  func upnpDiscover(didUpdate error: SpeedcheckerSDK.UPNPDiscoverError)
  func upnpDiscover(didUpdate device: SpeedcheckerSDK.UPNPDevice)
}
public class UPNPDiscover {
  final public let deviceType: SpeedcheckerSDK.UPNPDeviceType
  public var delegate: SpeedcheckerSDK.UPNPDiscoverDelegate?
  public var device: SpeedcheckerSDK.UPNPDevice? {
    get
  }
  public init(_ device: SpeedcheckerSDK.UPNPDeviceType, delegate: SpeedcheckerSDK.UPNPDiscoverDelegate?)
  public func update()
  public func action<Action>(_ type: Action, via service: SpeedcheckerSDK.UPNPServiceType, completion: @escaping (Action.Response?, SpeedcheckerSDK.UPNPDiscoverError?) -> Swift.Void) where Action : SpeedcheckerSDK.UPNPActionable
  @objc deinit
}
public class WifiSpeedTest {
  public init(_ ipAddress: Swift.String? = nil, isBackground: Swift.Bool = false, delegate: SpeedcheckerSDK.WifiSpeedTestDelegate?)
  public func start()
  @objc deinit
}
public protocol WifiSpeedTestDelegate {
  func wifiTest(finish error: SpeedcheckerSDK.SCTestError)
  func wifiTest(finish speed: SpeedcheckerSDK.SpeedTestSpeed)
  func wifiTest(latency: Swift.Int)
  func wifiTest(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed)
}
extension SpeedcheckerSDK.SCLatencySpeed : Swift.Equatable {}
