// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SpeedcheckerReportSDK
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import CoreTelephony
import Foundation
import SpeedcheckerSDK
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (SpeedcheckerReportSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (SpeedcheckerReportSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SpeedcheckerReportSDK.Reachability.NetworkStatus, b: SpeedcheckerReportSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: SpeedcheckerReportSDK.Reachability.Connection, b: SpeedcheckerReportSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: SpeedcheckerReportSDK.Reachability.NetworkReachable?
  public var whenUnreachable: SpeedcheckerReportSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: SpeedcheckerReportSDK.Reachability.Connection {
    get
  }
  public var connection: SpeedcheckerReportSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  public convenience init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  public convenience init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension SpeedcheckerReportSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum ReportCompletionResult {
  case reportSent
  case reportQueued
  public static func == (a: SpeedcheckerReportSDK.ReportCompletionResult, b: SpeedcheckerReportSDK.ReportCompletionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ReportCompletionHandler = (SpeedcheckerReportSDK.ReportCompletionResult) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SpeedcheckerReportSDK : ObjectiveC.NSObject {
  public static var shared: SpeedcheckerReportSDK.SpeedcheckerReportSDK
  public func initialize()
  public func reportConnectionIssue(type: SpeedcheckerReportSDK.SRIssueType, phoneNumber: Swift.String, comment: Swift.String?, userValue: Swift.String?, withSpeedTest: Swift.Bool = false, completion: @escaping SpeedcheckerReportSDK.ReportCompletionHandler)
  public func speedTest(delegate: SpeedcheckerSDK.InternetSpeedTestDelegate, completion: @escaping (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  public func speedTestStop(completion: @escaping (SpeedcheckerSDK.SpeedTestError?) -> Swift.Void)
  @objc deinit
}
extension SpeedcheckerReportSDK.SpeedcheckerReportSDK : SpeedcheckerSDK.InternetSpeedTestDelegate {
  public func internetTest(finish error: SpeedcheckerSDK.SpeedTestError)
  public func internetTest(finish result: SpeedcheckerSDK.SpeedTestResult)
  public func internetTest(received servers: [SpeedcheckerSDK.SpeedTestServer])
  public func internetTest(selected server: SpeedcheckerSDK.SpeedTestServer, latency: Swift.Int)
  public func internetTestDownloadStart()
  public func internetTestDownloadFinish()
  public func internetTestDownload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
  public func internetTestUploadStart()
  public func internetTestUploadFinish()
  public func internetTestUpload(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed?)
}
extension SpeedcheckerReportSDK.SpeedcheckerReportSDK : SpeedcheckerSDK.WifiSpeedTestDelegate {
  public func wifiTest(finish error: SpeedcheckerSDK.SCTestError)
  public func wifiTest(finish speed: SpeedcheckerSDK.SpeedTestSpeed)
  public func wifiTest(latency: Swift.Int)
  public func wifiTest(progress: Swift.Double, _ speed: SpeedcheckerSDK.SpeedTestSpeed)
}
@_hasMissingDesignatedInitializers public class SRSignalHelper {
  public func getWiFiInfo() -> (ssid: Swift.String, bssid: Swift.String)
  public func getCellularInfo() -> (id: Swift.String, mcc: Swift.String, mnc: Swift.String, technology: Swift.String)
  public func getSignalStrengh() -> (cellStrength: SpeedcheckerReportSDK.SRIssueSignalMeasurementStrength?, wiFiStrength: SpeedcheckerReportSDK.SRIssueSignalMeasurementStrength?)
  @objc deinit
}
public struct SRAppConfig {
}
public enum SRIssueType : Swift.Int, Swift.Codable {
  case callDrop
  case poorCallQuality
  case noSignal
  case unableToMakeCall
  case noMobileInternet
  case slowInternetSpeed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SRIssueSignalMeasurementStrength : Swift.Int, Swift.Codable {
  case weak
  case ok
  case veryGood
  case excellent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
